// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_bbprotobuf_2eproto__INCLUDED
#define PROTOBUF_bbprotobuf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2000002
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2000002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>

namespace bb {

// Internal implementation detail -- do not call these.
void  protobuf_BuildDesc_bbprotobuf_2eproto();
void protobuf_BuildDesc_bbprotobuf_2eproto_AssignGlobalDescriptors(
    ::google::protobuf::FileDescriptor* file);

class IrcLog;
class IrcLogs;

// ===================================================================

class IrcLog : public ::google::protobuf::Message {
 public:
  IrcLog();
  virtual ~IrcLog();
  
  IrcLog(const IrcLog& from);
  
  inline IrcLog& operator=(const IrcLog& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IrcLog& default_instance();
  // implements Message ----------------------------------------------
  
  IrcLog* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string channel = 1;
  inline bool has_channel() const;
  inline void clear_channel();
  inline const ::std::string& channel() const;
  inline void set_channel(const ::std::string& value);
  inline void set_channel(const char* value);
  inline ::std::string* mutable_channel();
  
  // required string time = 2;
  inline bool has_time() const;
  inline void clear_time();
  inline const ::std::string& time() const;
  inline void set_time(const ::std::string& value);
  inline void set_time(const char* value);
  inline ::std::string* mutable_time();
  
  // required string identifier = 3;
  inline bool has_identifier() const;
  inline void clear_identifier();
  inline const ::std::string& identifier() const;
  inline void set_identifier(const ::std::string& value);
  inline void set_identifier(const char* value);
  inline ::std::string* mutable_identifier();
  
  // required string message = 4;
  inline bool has_message() const;
  inline void clear_message();
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline ::std::string* mutable_message();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* channel_;
  static const ::std::string _default_channel_;
  ::std::string* time_;
  static const ::std::string _default_time_;
  ::std::string* identifier_;
  static const ::std::string _default_identifier_;
  ::std::string* message_;
  static const ::std::string _default_message_;
  friend void protobuf_BuildDesc_bbprotobuf_2eproto_AssignGlobalDescriptors(
      const ::google::protobuf::FileDescriptor* file);
  static const int _offsets_[4];
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static IrcLog* default_instance_;
};
// -------------------------------------------------------------------

class IrcLogs : public ::google::protobuf::Message {
 public:
  IrcLogs();
  virtual ~IrcLogs();
  
  IrcLogs(const IrcLogs& from);
  
  inline IrcLogs& operator=(const IrcLogs& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IrcLogs& default_instance();
  // implements Message ----------------------------------------------
  
  IrcLogs* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .bb.IrcLog irclogs = 1;
  inline int irclogs_size() const;
  inline void clear_irclogs();
  inline const ::google::protobuf::RepeatedPtrField< ::bb::IrcLog >& irclogs() const;
  inline ::google::protobuf::RepeatedPtrField< ::bb::IrcLog >* mutable_irclogs();
  inline const ::bb::IrcLog& irclogs(int index) const;
  inline ::bb::IrcLog* mutable_irclogs(int index);
  inline ::bb::IrcLog* add_irclogs();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::bb::IrcLog > irclogs_;
  friend void protobuf_BuildDesc_bbprotobuf_2eproto_AssignGlobalDescriptors(
      const ::google::protobuf::FileDescriptor* file);
  static const int _offsets_[1];
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static IrcLogs* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// IrcLog

// required string channel = 1;
inline bool IrcLog::has_channel() const {
  return _has_bit(0);
}
inline void IrcLog::clear_channel() {
  if (channel_ != &_default_channel_) {
    channel_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& IrcLog::channel() const {
  return *channel_;
}
inline void IrcLog::set_channel(const ::std::string& value) {
  _set_bit(0);
  if (channel_ == &_default_channel_) {
    channel_ = new ::std::string;
  }
  channel_->assign(value);
}
inline void IrcLog::set_channel(const char* value) {
  _set_bit(0);
  if (channel_ == &_default_channel_) {
    channel_ = new ::std::string;
  }
  channel_->assign(value);
}
inline ::std::string* IrcLog::mutable_channel() {
  _set_bit(0);
  if (channel_ == &_default_channel_) {
    channel_ = new ::std::string;
  }
  return channel_;
}

// required string time = 2;
inline bool IrcLog::has_time() const {
  return _has_bit(1);
}
inline void IrcLog::clear_time() {
  if (time_ != &_default_time_) {
    time_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& IrcLog::time() const {
  return *time_;
}
inline void IrcLog::set_time(const ::std::string& value) {
  _set_bit(1);
  if (time_ == &_default_time_) {
    time_ = new ::std::string;
  }
  time_->assign(value);
}
inline void IrcLog::set_time(const char* value) {
  _set_bit(1);
  if (time_ == &_default_time_) {
    time_ = new ::std::string;
  }
  time_->assign(value);
}
inline ::std::string* IrcLog::mutable_time() {
  _set_bit(1);
  if (time_ == &_default_time_) {
    time_ = new ::std::string;
  }
  return time_;
}

// required string identifier = 3;
inline bool IrcLog::has_identifier() const {
  return _has_bit(2);
}
inline void IrcLog::clear_identifier() {
  if (identifier_ != &_default_identifier_) {
    identifier_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& IrcLog::identifier() const {
  return *identifier_;
}
inline void IrcLog::set_identifier(const ::std::string& value) {
  _set_bit(2);
  if (identifier_ == &_default_identifier_) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(value);
}
inline void IrcLog::set_identifier(const char* value) {
  _set_bit(2);
  if (identifier_ == &_default_identifier_) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(value);
}
inline ::std::string* IrcLog::mutable_identifier() {
  _set_bit(2);
  if (identifier_ == &_default_identifier_) {
    identifier_ = new ::std::string;
  }
  return identifier_;
}

// required string message = 4;
inline bool IrcLog::has_message() const {
  return _has_bit(3);
}
inline void IrcLog::clear_message() {
  if (message_ != &_default_message_) {
    message_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& IrcLog::message() const {
  return *message_;
}
inline void IrcLog::set_message(const ::std::string& value) {
  _set_bit(3);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void IrcLog::set_message(const char* value) {
  _set_bit(3);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline ::std::string* IrcLog::mutable_message() {
  _set_bit(3);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  return message_;
}

// -------------------------------------------------------------------

// IrcLogs

// repeated .bb.IrcLog irclogs = 1;
inline int IrcLogs::irclogs_size() const {
  return irclogs_.size();
}
inline void IrcLogs::clear_irclogs() {
  irclogs_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::bb::IrcLog >&
IrcLogs::irclogs() const {
  return irclogs_;
}
inline ::google::protobuf::RepeatedPtrField< ::bb::IrcLog >*
IrcLogs::mutable_irclogs() {
  return &irclogs_;
}
inline const ::bb::IrcLog& IrcLogs::irclogs(int index) const {
  return irclogs_.Get(index);
}
inline ::bb::IrcLog* IrcLogs::mutable_irclogs(int index) {
  return irclogs_.Mutable(index);
}
inline ::bb::IrcLog* IrcLogs::add_irclogs() {
  return irclogs_.Add();
}


}  // namespace bb
#endif  // PROTOBUF_bbprotobuf_2eproto__INCLUDED
